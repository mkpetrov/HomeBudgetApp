using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using HomeBudgetApp.Forms;
using HomeBudgetApp.Models;
using DevExpress.XtraGrid.Views.Grid;

namespace HomeBudgetApp
{
    public partial class MainScreen : XtraForm
    {
        private List<Months> _months = new List<Months>();
        private List<Incomes> _incomes = new List<Incomes>();
        private List<IncomeTypes> _incomesTypes = new List<IncomeTypes>();
        private List<Expences> _expences = new List<Expences>();
        private List<ExpenceTypes> _expencesType = new List<ExpenceTypes>();

        public MainScreen()
        {
            InitializeComponent();

            LoadData();
            LoadEvents();
            AddDataSourceToLueMonths();
            LoadGridsDataSources();
            LoadChartControlData();
            // This line of code is generated by Data Source Configuration Wizard
            // Uncomment next line to set the total number of data records stored within your source
            // unboundSource1.SetRowCount(42);
            // This line of code is generated by Data Source Configuration Wizard
            this.unboundSource1.ValueNeeded += unboundSource1_ValueNeeded;
            // This line of code is generated by Data Source Configuration Wizard
            this.unboundSource1.ValuePushed += unboundSource1_ValuePushed;
            // This line of code is generated by Data Source Configuration Wizard
            // Uncomment next line to set the total number of data records stored within your source
            // unboundSource2.SetRowCount(42);
            // This line of code is generated by Data Source Configuration Wizard
            this.unboundSource2.ValueNeeded += unboundSource2_ValueNeeded;
            // This line of code is generated by Data Source Configuration Wizard
            this.unboundSource2.ValuePushed += unboundSource2_ValuePushed;
        }

        //----------------- METHODS -----------------------------------------

        private void LoadEvents()
        {
            btnExpence.Click += BtnExpence_Click;
            btnIncome.Click += BtnIncome_Click;
            lueМonths.EditValueChanged += LueМonths_EditValueChanged;
            gvTransactions.RowStyle += GvTransactions_RowStyle;
            teIncomeSum.EditValueChanged += TeIncomeSum_EditValueChanged;
            teExpendsSum.EditValueChanged += TeExpendsSum_EditValueChanged;
        }

        private void LoadData()
        {
            var context = new DbModel();

            using (context)
            {
                _months = context.Months.ToList();
                _incomes = context.Incomes.ToList();
                _incomesTypes = context.IncomeTypes.ToList();
                _expences = context.Expences.ToList();
                _expencesType = context.ExpenceTypes.ToList();
            }
        }

        private void LoadGridsDataSources()
        {
            AddDataSourceToIncomeGrid();
            AddDataSourceToExpenceGrid();
            AddDataSourceToTransactionGrid();
        }

        private void LoadChartControlData()
        {
            //chartControl1.DataSource = Convert.ToDecimal(teExpendsSum.Text) + Convert.ToDecimal(teIncomeSum.Text);
        }

        private void AddDataSourceToIncomeGrid()
        {
            var monthId = Convert.ToInt32(lueМonths.EditValue);
            var selectedMonthIncomes = _incomes.Where(x => x.Date.Month == monthId).ToList();

            var dataSource = selectedMonthIncomes
                            .Join(_incomesTypes
                            , inc => inc.IncomeTypeId
                            , type => type.Id
                            , (inc, type) => new
                            {
                                Date = inc.Date,
                                IncomeType = type.IncomeType,
                                Value = inc.Value
                            })
                            .ToList();

            gcIncomes.DataSource = dataSource;

            var incomesSum = dataSource.Sum(x => x.Value);
            teIncomeSum.Text = incomesSum.ToString();
        }

        private void AddDataSourceToExpenceGrid()
        {
            var monthId = Convert.ToInt32(lueМonths.EditValue);
            var selectedMonthExpences = _expences.Where(x => x.Date.Month == monthId).ToList();

            var dataSource = selectedMonthExpences
                            .Join(_expencesType
                            , inc => inc.ExpenceTypeId
                            , type => type.Id
                            , (inc, type) => new
                            {
                                Date = inc.Date,
                                ExpenceType = type.ExpenceType,
                                Value = inc.Value
                            })
                            .ToList();

            gcExpences.DataSource = dataSource;

            var expencesSum = dataSource.Sum(x => x.Value);
            teExpendsSum.Text = expencesSum.ToString();
        }

        private void AddDataSourceToTransactionGrid()
        {
            var monthId = Convert.ToInt32(lueМonths.EditValue);
            var selectedMonthIncomes = _incomes.Where(x => x.Date.Month == monthId).ToList();

            var selectedMonthIncomesDataSource = selectedMonthIncomes
                            .Join(_incomesTypes
                            , inc => inc.IncomeTypeId
                            , type => type.Id
                            , (inc, type) => new TransactionModel
                            {
                                Date = inc.Date,
                                Transaction = type.IncomeType,
                                Value = inc.Value,
                                TransactionType = "Приход"
                            })
                            .ToList();

            var selectedMonthExpences = _expences.Where(x => x.Date.Month == monthId).ToList();

            var selectedMonthExpencesDataSource = selectedMonthExpences
                            .Join(_expencesType
                            , inc => inc.ExpenceTypeId
                            , type => type.Id
                            , (inc, type) => new TransactionModel
                            {
                                Date = inc.Date,
                                Transaction = type.ExpenceType,
                                Value = inc.Value,
                                TransactionType = "Разход"
                            })
                            .ToList();

            selectedMonthIncomesDataSource.AddRange(selectedMonthExpencesDataSource);
            selectedMonthIncomesDataSource.OrderBy(x => x.Date);

            gcTransactions.DataSource = selectedMonthIncomesDataSource;
        }

        private void AddDataSourceToLueMonths()
        {
            lueМonths.Properties.DataSource = _months;
            lueМonths.Properties.DisplayMember = "MonthName";
            lueМonths.Properties.ValueMember = "Id";
            var currentMonth = DateTime.Now.Month;
            lueМonths.EditValue = currentMonth;
        }

        //-----------------------EVENTS -----------------------------------------

        private void BtnExpence_Click(object sender, EventArgs e)
        {
            var form = new AddIncomOrExpend(1);
            form.ShowDialog();
            form.TopMost = true;
            form.Focus();

            LoadData();
            LoadGridsDataSources();
        }

        private void BtnIncome_Click(object sender, EventArgs e)
        {
            var form = new AddIncomOrExpend(default(int));
            form.ShowDialog();
            form.TopMost = true;
            form.Focus();

            LoadData();
            LoadGridsDataSources();
        }

        private void LueМonths_EditValueChanged(object sender, EventArgs e)
        {
            LoadGridsDataSources();
        }

        private void GvTransactions_RowStyle(object sender, RowStyleEventArgs e)
        {
            var view = sender as GridView;

            if(e.RowHandle >= default(int))
            {
                var transactionType = view.GetRowCellDisplayText(e.RowHandle, view.Columns["TransactionType"]);

                if (transactionType == "Приход")
                {
                    e.Appearance.BackColor = Color.DarkOliveGreen;
                }
                else
                {
                    e.Appearance.BackColor = Color.IndianRed;
                }
            }
        }

        private void TeIncomeSum_EditValueChanged(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(teIncomeSum.Text))
                return;

            if (string.IsNullOrWhiteSpace(teExpendsSum.Text))
                teDifrence.Text = teIncomeSum.Text;
            else
            {
                var income = Convert.ToDecimal(teIncomeSum.Text);
                var expends = Convert.ToDecimal(teExpendsSum.Text);

                teDifrence.Text = (income - expends).ToString();

                if (teDifrence.Text.Contains("-"))
                    teDifrence.BackColor = Color.Red;
                else
                    teDifrence.BackColor = Color.Green;
            }
        }

        private void TeExpendsSum_EditValueChanged(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(teExpendsSum.Text))
                return;

            var income = Convert.ToDecimal(teIncomeSum.Text);
            var expends = Convert.ToDecimal(teExpendsSum.Text);

            teDifrence.Text = (income - expends).ToString();

            if (teDifrence.Text.Contains("-"))
                teDifrence.BackColor = Color.Red;
            else
                teDifrence.BackColor = Color.GreenYellow;
        }

        // This event is generated by Data Source Configuration Wizard
        void unboundSource1_ValueNeeded(object sender, DevExpress.Data.UnboundSourceValueNeededEventArgs e)
        {

            // Handle this event to obtain data from your data source
            // e.Value = something /* TODO: Assign the real data here.*/
        }

        // This event is generated by Data Source Configuration Wizard
        void unboundSource1_ValuePushed(object sender, DevExpress.Data.UnboundSourceValuePushedEventArgs e)
        {

            // Handle this event to save modified data back to your data source
            // something = e.Value; /* TODO: Propagate the value into the storage.*/
        }

        // This event is generated by Data Source Configuration Wizard
        void unboundSource2_ValueNeeded(object sender, DevExpress.Data.UnboundSourceValueNeededEventArgs e)
        {

            // Handle this event to obtain data from your data source
            // e.Value = something /* TODO: Assign the real data here.*/
        }

        // This event is generated by Data Source Configuration Wizard
        void unboundSource2_ValuePushed(object sender, DevExpress.Data.UnboundSourceValuePushedEventArgs e)
        {

            // Handle this event to save modified data back to your data source
            // something = e.Value; /* TODO: Propagate the value into the storage.*/
        }
    }
}